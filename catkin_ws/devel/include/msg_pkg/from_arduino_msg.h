// Generated by gencpp from file msg_pkg/from_arduino_msg.msg
// DO NOT EDIT!


#ifndef MSG_PKG_MESSAGE_FROM_ARDUINO_MSG_H
#define MSG_PKG_MESSAGE_FROM_ARDUINO_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_pkg
{
template <class ContainerAllocator>
struct from_arduino_msg_
{
  typedef from_arduino_msg_<ContainerAllocator> Type;

  from_arduino_msg_()
    : ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , encoder1(0)
    , encoder2(0)  {
    }
  from_arduino_msg_(const ContainerAllocator& _alloc)
    : ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , encoder1(0)
    , encoder2(0)  {
  (void)_alloc;
    }



   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef float _gx_type;
  _gx_type gx;

   typedef float _gy_type;
  _gy_type gy;

   typedef float _gz_type;
  _gz_type gz;

   typedef float _mx_type;
  _mx_type mx;

   typedef float _my_type;
  _my_type my;

   typedef float _mz_type;
  _mz_type mz;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int32_t _encoder1_type;
  _encoder1_type encoder1;

   typedef int32_t _encoder2_type;
  _encoder2_type encoder2;





  typedef boost::shared_ptr< ::msg_pkg::from_arduino_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_pkg::from_arduino_msg_<ContainerAllocator> const> ConstPtr;

}; // struct from_arduino_msg_

typedef ::msg_pkg::from_arduino_msg_<std::allocator<void> > from_arduino_msg;

typedef boost::shared_ptr< ::msg_pkg::from_arduino_msg > from_arduino_msgPtr;
typedef boost::shared_ptr< ::msg_pkg::from_arduino_msg const> from_arduino_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_pkg::from_arduino_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_pkg::from_arduino_msg_<ContainerAllocator1> & lhs, const ::msg_pkg::from_arduino_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.gx == rhs.gx &&
    lhs.gy == rhs.gy &&
    lhs.gz == rhs.gz &&
    lhs.mx == rhs.mx &&
    lhs.my == rhs.my &&
    lhs.mz == rhs.mz &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.encoder1 == rhs.encoder1 &&
    lhs.encoder2 == rhs.encoder2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_pkg::from_arduino_msg_<ContainerAllocator1> & lhs, const ::msg_pkg::from_arduino_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::from_arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::from_arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::from_arduino_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db9e644fcaf1f0833ccfae8d80ddb567";
  }

  static const char* value(const ::msg_pkg::from_arduino_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb9e644fcaf1f083ULL;
  static const uint64_t static_value2 = 0x3ccfae8d80ddb567ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_pkg/from_arduino_msg";
  }

  static const char* value(const ::msg_pkg::from_arduino_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ax\n"
"float32 ay\n"
"float32 az\n"
"float32 gx\n"
"float32 gy\n"
"float32 gz\n"
"float32 mx\n"
"float32 my\n"
"float32 mz\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"int32 encoder1\n"
"int32 encoder2\n"
;
  }

  static const char* value(const ::msg_pkg::from_arduino_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gz);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.mz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.encoder1);
      stream.next(m.encoder2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct from_arduino_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_pkg::from_arduino_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_pkg::from_arduino_msg_<ContainerAllocator>& v)
  {
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "gx: ";
    Printer<float>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<float>::stream(s, indent + "  ", v.gy);
    s << indent << "gz: ";
    Printer<float>::stream(s, indent + "  ", v.gz);
    s << indent << "mx: ";
    Printer<float>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<float>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<float>::stream(s, indent + "  ", v.mz);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "encoder1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder1);
    s << indent << "encoder2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_PKG_MESSAGE_FROM_ARDUINO_MSG_H
