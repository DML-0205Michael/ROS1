// Generated by gencpp from file msg_pkg/to_arduino_msg.msg
// DO NOT EDIT!


#ifndef MSG_PKG_MESSAGE_TO_ARDUINO_MSG_H
#define MSG_PKG_MESSAGE_TO_ARDUINO_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_pkg
{
template <class ContainerAllocator>
struct to_arduino_msg_
{
  typedef to_arduino_msg_<ContainerAllocator> Type;

  to_arduino_msg_()
    : M1_speed(0.0)
    , M2_speed(0.0)
    , M1_encoder_speed(0)
    , M2_encoder_speed(0)  {
    }
  to_arduino_msg_(const ContainerAllocator& _alloc)
    : M1_speed(0.0)
    , M2_speed(0.0)
    , M1_encoder_speed(0)
    , M2_encoder_speed(0)  {
  (void)_alloc;
    }



   typedef float _M1_speed_type;
  _M1_speed_type M1_speed;

   typedef float _M2_speed_type;
  _M2_speed_type M2_speed;

   typedef int32_t _M1_encoder_speed_type;
  _M1_encoder_speed_type M1_encoder_speed;

   typedef int32_t _M2_encoder_speed_type;
  _M2_encoder_speed_type M2_encoder_speed;





  typedef boost::shared_ptr< ::msg_pkg::to_arduino_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_pkg::to_arduino_msg_<ContainerAllocator> const> ConstPtr;

}; // struct to_arduino_msg_

typedef ::msg_pkg::to_arduino_msg_<std::allocator<void> > to_arduino_msg;

typedef boost::shared_ptr< ::msg_pkg::to_arduino_msg > to_arduino_msgPtr;
typedef boost::shared_ptr< ::msg_pkg::to_arduino_msg const> to_arduino_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_pkg::to_arduino_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_pkg::to_arduino_msg_<ContainerAllocator1> & lhs, const ::msg_pkg::to_arduino_msg_<ContainerAllocator2> & rhs)
{
  return lhs.M1_speed == rhs.M1_speed &&
    lhs.M2_speed == rhs.M2_speed &&
    lhs.M1_encoder_speed == rhs.M1_encoder_speed &&
    lhs.M2_encoder_speed == rhs.M2_encoder_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_pkg::to_arduino_msg_<ContainerAllocator1> & lhs, const ::msg_pkg::to_arduino_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::to_arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::to_arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::to_arduino_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71a226260b511ec21d1286ef6c684eb7";
  }

  static const char* value(const ::msg_pkg::to_arduino_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71a226260b511ec2ULL;
  static const uint64_t static_value2 = 0x1d1286ef6c684eb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_pkg/to_arduino_msg";
  }

  static const char* value(const ::msg_pkg::to_arduino_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 M1_speed\n"
"float32 M2_speed\n"
"int32 M1_encoder_speed\n"
"int32 M2_encoder_speed\n"
;
  }

  static const char* value(const ::msg_pkg::to_arduino_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.M1_speed);
      stream.next(m.M2_speed);
      stream.next(m.M1_encoder_speed);
      stream.next(m.M2_encoder_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct to_arduino_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_pkg::to_arduino_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_pkg::to_arduino_msg_<ContainerAllocator>& v)
  {
    s << indent << "M1_speed: ";
    Printer<float>::stream(s, indent + "  ", v.M1_speed);
    s << indent << "M2_speed: ";
    Printer<float>::stream(s, indent + "  ", v.M2_speed);
    s << indent << "M1_encoder_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.M1_encoder_speed);
    s << indent << "M2_encoder_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.M2_encoder_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_PKG_MESSAGE_TO_ARDUINO_MSG_H
