# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_pkg/from_arduino_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class from_arduino_msg(genpy.Message):
  _md5sum = "db9e644fcaf1f0833ccfae8d80ddb567"
  _type = "msg_pkg/from_arduino_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 ax
float32 ay
float32 az
float32 gx
float32 gy
float32 gz
float32 mx
float32 my
float32 mz
float32 roll
float32 pitch
float32 yaw
int32 encoder1
int32 encoder2
"""
  __slots__ = ['ax','ay','az','gx','gy','gz','mx','my','mz','roll','pitch','yaw','encoder1','encoder2']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ax,ay,az,gx,gy,gz,mx,my,mz,roll,pitch,yaw,encoder1,encoder2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(from_arduino_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
      if self.gx is None:
        self.gx = 0.
      if self.gy is None:
        self.gy = 0.
      if self.gz is None:
        self.gz = 0.
      if self.mx is None:
        self.mx = 0.
      if self.my is None:
        self.my = 0.
      if self.mz is None:
        self.mz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.encoder1 is None:
        self.encoder1 = 0
      if self.encoder2 is None:
        self.encoder2 = 0
    else:
      self.ax = 0.
      self.ay = 0.
      self.az = 0.
      self.gx = 0.
      self.gy = 0.
      self.gz = 0.
      self.mx = 0.
      self.my = 0.
      self.mz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.encoder1 = 0
      self.encoder2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f2i().pack(_x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz, _x.roll, _x.pitch, _x.yaw, _x.encoder1, _x.encoder2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz, _x.roll, _x.pitch, _x.yaw, _x.encoder1, _x.encoder2,) = _get_struct_12f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f2i().pack(_x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz, _x.roll, _x.pitch, _x.yaw, _x.encoder1, _x.encoder2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz, _x.roll, _x.pitch, _x.yaw, _x.encoder1, _x.encoder2,) = _get_struct_12f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f2i = None
def _get_struct_12f2i():
    global _struct_12f2i
    if _struct_12f2i is None:
        _struct_12f2i = struct.Struct("<12f2i")
    return _struct_12f2i
